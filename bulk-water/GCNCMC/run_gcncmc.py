import numpy as np
import argparse
from simtk.openmm.app import *
from simtk.openmm import *
from simtk.unit import *
from sys import stdout
import time

from openmmtools.integrators import BAOABIntegrator

import grand

parser = argparse.ArgumentParser()
parser.add_argument('--pert', type=int, default=1, help='Number of perturbation steps')
parser.add_argument('--prop', type=int, default=1, help='Number of propagation steps')
args = parser.parse_args()

# Load in a water box PDB...
pdb = PDBFile('../water_box-eq.pdb')

# Add ghosts
pdb.topology, pdb.positions, ghosts = grand.utils.add_ghosts(pdb.topology,
                                                             pdb.positions,
                                                             n=50,
                                                             pdb='water-ghosts.pdb')

ff = ForceField('tip3p.xml')

# Create a system using the pdb.topology generated by add_ghosts()
system = ff.createSystem(pdb.topology,
                         nonbondedMethod=PME,
                         nonbondedCutoff=12.0*angstroms,
                         switchDistance=10.0*angstroms,
                         constraints=HBonds)

# Langevin integrator
integrator = BAOABIntegrator(298*kelvin, 1.0/picosecond, 0.002*picoseconds)

# Create GCNCMC sampler object
gcncmc_mover = grand.samplers.NonequilibriumGCMCSystemSampler(system=system,
                                                            topology=pdb.topology,
                                                            temperature=298*kelvin,
                                                            integrator=integrator,
                                                            excessChemicalPotential=-6.09*kilocalories_per_mole,
                                                            standardVolume=30.345*angstroms**3,
                                                            nPertSteps=args.pert, 
                                                            nPropStepsPerPert=args.prop, 
                                                            boxVectors=np.array(pdb.topology.getPeriodicBoxVectors()),
                                                            ghostFile=f"ghosts-{args.pert}-{args.prop}.txt",
                                                            log=f"{args.pert}pert-{args.prop}prop.log",
                                                            overwrite=False)

# Define platform and precision
platform = Platform.getPlatformByName('CUDA')
platform.setPropertyDefaultValue('Precision', 'mixed')

# Create Simulation object and set positions, velocities and box vectors
simulation = Simulation(pdb.topology, system, gcmc_mover.compound_integrator, platform)
simulation.context.setPositions(pdb.positions)
simulation.context.setVelocitiesToTemperature(298*kelvin)
simulation.context.setPeriodicBoxVectors(*pdb.topology.getPeriodicBoxVectors())

# Initialise GCNCMC mover
gcncmc_mover.initialise(simulation.context, ghosts)

# Run for 12 hours and write out after every move
start = time.time()

limit = 12*60*60

for i in range(10000000000000):
    simulation.step(5000)

    gcncmc_mover.move(simulation.context, 1)

    gcmc_mover.report(simulation)

    if time.time() >= start+limit:
        break
    

